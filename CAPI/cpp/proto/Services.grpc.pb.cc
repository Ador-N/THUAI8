// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Services.proto

#include "Services.pb.h"
#include "Services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protobuf {

static const char* AvailableService_method_names[] = {
  "/protobuf.AvailableService/TryConnection",
  "/protobuf.AvailableService/AddCharacter",
  "/protobuf.AvailableService/GetMap",
  "/protobuf.AvailableService/Move",
  "/protobuf.AvailableService/Recover",
  "/protobuf.AvailableService/Harvest",
  "/protobuf.AvailableService/Rebuild",
  "/protobuf.AvailableService/Construct",
  "/protobuf.AvailableService/Equip",
  "/protobuf.AvailableService/Attack",
  "/protobuf.AvailableService/Cast",
  "/protobuf.AvailableService/Send",
  "/protobuf.AvailableService/CreatCharacter",
  "/protobuf.AvailableService/CreatCharacterRID",
  "/protobuf.AvailableService/EndAllAction",
};

std::unique_ptr< AvailableService::Stub> AvailableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AvailableService::Stub> stub(new AvailableService::Stub(channel));
  return stub;
}

AvailableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TryConnection_(AvailableService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCharacter_(AvailableService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMap_(AvailableService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(AvailableService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(AvailableService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Harvest_(AvailableService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rebuild_(AvailableService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Construct_(AvailableService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Equip_(AvailableService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Attack_(AvailableService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cast_(AvailableService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_(AvailableService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatCharacter_(AvailableService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatCharacterRID_(AvailableService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndAllAction_(AvailableService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AvailableService::Stub::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TryConnection_, context, request, response);
}

void AvailableService::Stub::experimental_async::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::TryConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::TryConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncTryConnectionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_TryConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncTryConnectionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_TryConnection_, context, request, false);
}

::grpc::ClientReader< ::protobuf::MessageToClient>* AvailableService::Stub::AddCharacterRaw(::grpc::ClientContext* context, const ::protobuf::CharacterMsg& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::protobuf::MessageToClient>::Create(channel_.get(), rpcmethod_AddCharacter_, context, request);
}

void AvailableService::Stub::experimental_async::AddCharacter(::grpc::ClientContext* context, ::protobuf::CharacterMsg* request, ::grpc::experimental::ClientReadReactor< ::protobuf::MessageToClient>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::protobuf::MessageToClient>::Create(stub_->channel_.get(), stub_->rpcmethod_AddCharacter_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::protobuf::MessageToClient>* AvailableService::Stub::AsyncAddCharacterRaw(::grpc::ClientContext* context, const ::protobuf::CharacterMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddCharacter_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::protobuf::MessageToClient>* AvailableService::Stub::PrepareAsyncAddCharacterRaw(::grpc::ClientContext* context, const ::protobuf::CharacterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddCharacter_, context, request, false, nullptr);
}

::grpc::Status AvailableService::Stub::GetMap(::grpc::ClientContext* context, const ::protobuf::NullRequest& request, ::protobuf::MessageOfMap* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void AvailableService::Stub::experimental_async::GetMap(::grpc::ClientContext* context, const ::protobuf::NullRequest* request, ::protobuf::MessageOfMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::GetMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::MessageOfMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::GetMap(::grpc::ClientContext* context, const ::protobuf::NullRequest* request, ::protobuf::MessageOfMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::GetMap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::MessageOfMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::MessageOfMap>* AvailableService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::protobuf::NullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::MessageOfMap>::Create(channel_.get(), cq, rpcmethod_GetMap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::MessageOfMap>* AvailableService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::protobuf::NullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::MessageOfMap>::Create(channel_.get(), cq, rpcmethod_GetMap_, context, request, false);
}

::grpc::Status AvailableService::Stub::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::protobuf::MoveRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Move_, context, request, response);
}

void AvailableService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::MoveRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::MoveRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::MoveRes>* AvailableService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::MoveRes>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::MoveRes>* AvailableService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::MoveRes>::Create(channel_.get(), cq, rpcmethod_Move_, context, request, false);
}

::grpc::Status AvailableService::Stub::Recover(::grpc::ClientContext* context, const ::protobuf::RecoverMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void AvailableService::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::protobuf::RecoverMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::protobuf::RecoverMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::protobuf::RecoverMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::protobuf::RecoverMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, false);
}

::grpc::Status AvailableService::Stub::Harvest(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Harvest_, context, request, response);
}

void AvailableService::Stub::experimental_async::Harvest(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Harvest_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Harvest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Harvest_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Harvest(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Harvest_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Harvest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Harvest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncHarvestRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Harvest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncHarvestRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Harvest_, context, request, false);
}

::grpc::Status AvailableService::Stub::Rebuild(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rebuild_, context, request, response);
}

void AvailableService::Stub::experimental_async::Rebuild(::grpc::ClientContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rebuild_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Rebuild(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rebuild_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Rebuild(::grpc::ClientContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rebuild_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Rebuild(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rebuild_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncRebuildRaw(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Rebuild_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncRebuildRaw(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Rebuild_, context, request, false);
}

::grpc::Status AvailableService::Stub::Construct(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Construct_, context, request, response);
}

void AvailableService::Stub::experimental_async::Construct(::grpc::ClientContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Construct_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Construct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Construct_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Construct(::grpc::ClientContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Construct_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Construct(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Construct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncConstructRaw(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Construct_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncConstructRaw(::grpc::ClientContext* context, const ::protobuf::ConstructMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Construct_, context, request, false);
}

::grpc::Status AvailableService::Stub::Equip(::grpc::ClientContext* context, const ::protobuf::EquipMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Equip_, context, request, response);
}

void AvailableService::Stub::experimental_async::Equip(::grpc::ClientContext* context, const ::protobuf::EquipMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Equip_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Equip(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Equip_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Equip(::grpc::ClientContext* context, const ::protobuf::EquipMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Equip_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Equip(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Equip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncEquipRaw(::grpc::ClientContext* context, const ::protobuf::EquipMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Equip_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncEquipRaw(::grpc::ClientContext* context, const ::protobuf::EquipMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Equip_, context, request, false);
}

::grpc::Status AvailableService::Stub::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Attack_, context, request, response);
}

void AvailableService::Stub::experimental_async::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Attack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Attack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncAttackRaw(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Attack_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncAttackRaw(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Attack_, context, request, false);
}

::grpc::Status AvailableService::Stub::Cast(::grpc::ClientContext* context, const ::protobuf::CastMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Cast_, context, request, response);
}

void AvailableService::Stub::experimental_async::Cast(::grpc::ClientContext* context, const ::protobuf::CastMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cast_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Cast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Cast_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Cast(::grpc::ClientContext* context, const ::protobuf::CastMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cast_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Cast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Cast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncCastRaw(::grpc::ClientContext* context, const ::protobuf::CastMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Cast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncCastRaw(::grpc::ClientContext* context, const ::protobuf::CastMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Cast_, context, request, false);
}

::grpc::Status AvailableService::Stub::Send(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Send_, context, request, response);
}

void AvailableService::Stub::experimental_async::Send(::grpc::ClientContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::Send(::grpc::ClientContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::Send(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Send_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_Send_, context, request, false);
}

::grpc::Status AvailableService::Stub::CreatCharacter(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatCharacter_, context, request, response);
}

void AvailableService::Stub::experimental_async::CreatCharacter(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatCharacter_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::CreatCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatCharacter_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::CreatCharacter(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatCharacter_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::CreatCharacter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncCreatCharacterRaw(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_CreatCharacter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncCreatCharacterRaw(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_CreatCharacter_, context, request, false);
}

::grpc::Status AvailableService::Stub::CreatCharacterRID(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::protobuf::CreatCharacterRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreatCharacterRID_, context, request, response);
}

void AvailableService::Stub::experimental_async::CreatCharacterRID(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::CreatCharacterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatCharacterRID_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::CreatCharacterRID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::CreatCharacterRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreatCharacterRID_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::CreatCharacterRID(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::CreatCharacterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatCharacterRID_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::CreatCharacterRID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::CreatCharacterRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreatCharacterRID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::CreatCharacterRes>* AvailableService::Stub::AsyncCreatCharacterRIDRaw(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::CreatCharacterRes>::Create(channel_.get(), cq, rpcmethod_CreatCharacterRID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::CreatCharacterRes>* AvailableService::Stub::PrepareAsyncCreatCharacterRIDRaw(::grpc::ClientContext* context, const ::protobuf::CreatCharacterMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::CreatCharacterRes>::Create(channel_.get(), cq, rpcmethod_CreatCharacterRID_, context, request, false);
}

::grpc::Status AvailableService::Stub::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EndAllAction_, context, request, response);
}

void AvailableService::Stub::experimental_async::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::EndAllAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, std::move(f));
}

void AvailableService::Stub::experimental_async::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, reactor);
}

void AvailableService::Stub::experimental_async::EndAllAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protobuf::BoolRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::AsyncEndAllActionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_EndAllAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncEndAllActionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protobuf::BoolRes>::Create(channel_.get(), cq, rpcmethod_EndAllAction_, context, request, false);
}

AvailableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::TryConnection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AvailableService::Service, ::protobuf::CharacterMsg, ::protobuf::MessageToClient>(
          std::mem_fn(&AvailableService::Service::AddCharacter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::NullRequest, ::protobuf::MessageOfMap>(
          std::mem_fn(&AvailableService::Service::GetMap), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::MoveMsg, ::protobuf::MoveRes>(
          std::mem_fn(&AvailableService::Service::Move), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::RecoverMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Recover), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Harvest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::ConstructMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Rebuild), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::ConstructMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Construct), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::EquipMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Equip), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::AttackMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Attack), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::CastMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Cast), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::SendMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::Send), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::CreatCharacterMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::CreatCharacter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::CreatCharacterMsg, ::protobuf::CreatCharacterRes>(
          std::mem_fn(&AvailableService::Service::CreatCharacterRID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AvailableService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes>(
          std::mem_fn(&AvailableService::Service::EndAllAction), this)));
}

AvailableService::Service::~Service() {
}

::grpc::Status AvailableService::Service::TryConnection(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::AddCharacter(::grpc::ServerContext* context, const ::protobuf::CharacterMsg* request, ::grpc::ServerWriter< ::protobuf::MessageToClient>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::GetMap(::grpc::ServerContext* context, const ::protobuf::NullRequest* request, ::protobuf::MessageOfMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Move(::grpc::ServerContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Recover(::grpc::ServerContext* context, const ::protobuf::RecoverMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Harvest(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Rebuild(::grpc::ServerContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Construct(::grpc::ServerContext* context, const ::protobuf::ConstructMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Equip(::grpc::ServerContext* context, const ::protobuf::EquipMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Attack(::grpc::ServerContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Cast(::grpc::ServerContext* context, const ::protobuf::CastMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::Send(::grpc::ServerContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::CreatCharacter(::grpc::ServerContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::CreatCharacterRID(::grpc::ServerContext* context, const ::protobuf::CreatCharacterMsg* request, ::protobuf::CreatCharacterRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AvailableService::Service::EndAllAction(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protobuf

